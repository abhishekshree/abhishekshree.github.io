{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This was a jump into a huge rabbit hole, and it turns out to no one's surprise, programming languages are weird. I was writing in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"certain language\"), \" and for setting up an action which would later be consuming my program, I needed to compile the program in cloud and again to no one's surprise, you cannot compile really huge binaries on third party cloud services. \"), mdx(\"details\", null, mdx(\"summary\", null, \"What could be the the solution?\"), mdx(\"p\", null, \"  Rewrite everything in C.\")), mdx(\"hr\", null), mdx(\"p\", null, \"But I am dumping some finds here which I found to be interesting so I will dump here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/MichalStrehovsky/sizegame\"\n  }, \"This comparison, and it keeps on improving\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/questions/6771905/how-to-decrease-the-size-of-generated-binaries\"\n  }, \"If you do end up following the suggestion above\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/a/46382482\"\n  }, \"Also, use objdump with caution if you follow the advice above\"))), mdx(\"p\", null, \"Might write a detailed blog about the same sometime later...\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>This was a jump into a huge rabbit hole, and it turns out to no one&#x27;s surprise, programming languages are weird. I was writing in a <em>certain language</em> and for setting up an action which would later be consuming my program, I needed to compile the program in cloud and again to no one&#x27;s surprise, you cannot compile really huge binaries on third party cloud services. </p><details><summary>What could be the the solution?</summary><p>  Rewrite everything in C.</p></details><hr/><p>But I am dumping some finds here which I found to be interesting so I will dump here:</p><ul><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://github.com/MichalStrehovsky/sizegame\">This comparison, and it keeps on improving</a></li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://stackoverflow.com/questions/6771905/how-to-decrease-the-size-of-generated-binaries\">If you do end up following the suggestion above</a></li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://stackoverflow.com/a/46382482\">Also, use objdump with caution if you follow the advice above</a></li></ul><p>Might write a detailed blog about the same sometime later...</p>","scope":{}},"frontMatter":{"wordCount":138,"readingTime":{"text":"1 min read","minutes":0.685,"time":41100,"words":137},"slug":"tilbinaries","fileName":"tilbinaries.mdx","title":"TIL - Binaries are weird","date":"2023-07-04","tags":["linux","binaries","til"],"draft":false,"summary":"Wanted to know why are binaries for the same program of variable size and what optimizations follow.","images":[]}},"prev":{"title":"How can my app actually work?","date":"2023-01-02","tags":["system design","go","RAS","guide"],"draft":false,"summary":"A summary of learnings and failings and the loop.","images":[],"slug":"backend101"},"next":{"title":"Generics and code correctness","date":"2023-07-05","tags":[],"draft":false,"summary":"Summarizing how generics and abstractions help in explainability of code","images":[],"slug":"generics-and-code-correctness"}},"__N_SSG":true}