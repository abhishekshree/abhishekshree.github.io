{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There has been a very interesting case highlighting how a backend system based on a functional language could outshine the object-oriented ones. The case can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/gergelyorosz/status/1502947315279187979\"\n  }, \"here\"), \". \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TL;DR -\"), \" Idempotency is a really essential component to consider while building backend systems.\"), mdx(\"p\", null, \"Quick recap: Idempotency is a Web API design principle defined as the ability to apply the same operation multiple times without changing the result beyond the first try.\"), mdx(\"p\", null, \"More on that \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation\"\n  }, \"here\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\"\n  }, \"here\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>There has been a very interesting case highlighting how a backend system based on a functional language could outshine the object-oriented ones. The case can be found <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://twitter.com/gergelyorosz/status/1502947315279187979\">here</a>. </p><p><strong>TL;DR -</strong> Idempotency is a really essential component to consider while building backend systems.</p><p>Quick recap: Idempotency is a Web API design principle defined as the ability to apply the same operation multiple times without changing the result beyond the first try.</p><p>More on that <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation\">here</a> and <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">here</a>.</p>","scope":{}},"frontMatter":{"wordCount":78,"readingTime":{"text":"1 min read","minutes":0.38,"time":22800,"words":76},"slug":"tiluber-eats","fileName":"tiluber-eats.mdx","title":"TIL - The case with Uber Eats","date":"2022-04-29","tags":["fp","idempotency","backend"],"draft":false,"summary":null,"images":[]}},"prev":{"title":"TIL - Github and ASCIIbetically sorted folders","date":"2021-12-13","tags":["TIL","Github","Git"],"draft":false,"summary":"Weirdly sorted oof!","images":[],"slug":"til-git-folders"},"next":null},"__N_SSG":true}