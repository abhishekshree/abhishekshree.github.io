{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Tl;dr: This post is going to be based on my experience with building and monitoring the Recruitment Automation System on which I worked the past summer. I will also summarize some decisions made during the development process and discuss some of the challenges we faced.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"primer\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#primer\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Primer\"), mdx(\"p\", null, \"Anyone who has wanted to build something which others can use has probably thought about the following questions:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How do I make sure people can use my product?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How many people can use my product?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"What harm can exposing my product to the world do? (yeah I mean you don't want to make something which can be compromised and has 1000s of users)\")), mdx(\"p\", null, \"Most of what people see lies on the Frontend or the more visual component of the solution. But a lot of heavy lifting happens on the backend hidden from the rest of the users. A lot of answers to the above questions lie in the choices made while thinking about the backend of the system.\"), mdx(\"p\", null, \"Anyway I am not here to narrate a story, I would assume the reader to know something about building elementary frontend and backend. \"), mdx(\"p\", null, \"Also consider reading: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.joelonsoftware.com/2006/08/01/can-your-programming-language-do-this/\"\n  }, \"About which language to use\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Being a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.joelonsoftware.com/2009/09/23/the-duct-tape-programmer/\"\n  }, \"duct tape programmer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://engineering.grab.com/zero-downtime-migration\"\n  }, \"Inspiring work\"))), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"more-technical-stuff\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#more-technical-stuff\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"More Technical Stuff\"), mdx(\"h3\", {\n    \"id\": \"writing-neat-code\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#writing-neat-code\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Writing neat code\"), mdx(\"p\", null, \"Structuring how the backend services look (in an abstract way) contribute to a lot in terms of maintainability and scalability. Yeah one can write all of the logic in one huge file with all primitive types and no abstractions but that is not the way to go. There is a reason why \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"struct\"), \" exists in most languages, use it to your advantage. Folders are free of cost and the visibility they provide at a glance is priceless (for real).\"), mdx(\"h3\", {\n    \"id\": \"abstraction\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#abstraction\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Abstraction\"), mdx(\"p\", null, \"Abstraction always helps. However difficult it might seem to be, it kind of simplifies the whole process in the long run. There are a lot of high-level frameworks which currently enable to abstract out a lot of the low-level details from the developer and still be pretty powerful. For example, I came across a framework in Scala after the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.bloomberg.com/news/articles/2022-11-16/twitter-layoffs-are-bad-example-of-how-to-fire-people\"\n  }, \"Twitter Layoff News\"), \" called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.github.io/finagle/\"\n  }, \"Finagle\"), \". It is a RPC framework which is used by Twitter to build their backend services. The most amazing part about Finagle is in how simplistic it is to write services and client code too, meanwhile the services can be as complex as nodes on a distributed system communicating with each other (in form of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Future[Unit]\"), \", for the enthusiasts).\"), mdx(\"p\", null, \"This \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.github.io/scala_school/searchbird.html\"\n  }, \"example\"), \" over here is just beautiful. Scala is a pretty amazing language with all the good parts of Java, ngl.\"), mdx(\"p\", null, \"Moreover, another abstraction over \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.github.io/finagle/\"\n  }, \"Finagle\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.github.io/twitter-server/\"\n  }, \"TwitterServer\"), \" is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.github.io/finatra/\"\n  }, \"Finatra\"), \". It is a web framework built on top of Finagle. It is pretty amazing to see how much of the boilerplate code can be abstracted away.\"), mdx(\"p\", null, \"More on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blog.rockthejvm.com/finagle/\"\n  }, \"Finagle\"), \" for the curious. Just check out the Load Balancer part over there. Fascinating!\"), mdx(\"h3\", {\n    \"id\": \"architecture\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#architecture\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Architecture\"), mdx(\"p\", null, \"How a system is designed, the choices made at one particular point in time, with one particular tool/protocol/middleware, might sound to have a lot of value. But it does not kill in most of the cases. It is important to keep in mind that the system is not going to be static. It is going to evolve and change. So it is important to keep the architecture as decoupled as possible and not over-engineering it needs real skills.\"), mdx(\"p\", null, \"Prime examples of over-engineering:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thinking of \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://martinfowler.com/articles/microservices.html\"\n  }, \"microservices\"), \" in the beginning.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://grpc.io/\"\n  }, \"gRPC\"), \" for everything. It is fast but for a very different use case. It is not a replacement for REST APIs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://kafka.apache.org/\"\n  }, \"Kafka\"), \" for simple pub-sub use cases. It is a distributed streaming platform and not a message broker.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fancy \\\"Design Patterns\\\", yeah I would totally not write anything v1 with CQRS in mind.\")), mdx(\"p\", null, \"Anyway, the above mentioned tools are pretty awesome, but they're just too good for some 1000s of users in my opinion.\"), mdx(\"h3\", {\n    \"id\": \"devops\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#devops\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"DevOps\"), mdx(\"p\", null, \"Learn about Docker containers today! Learn some network basics! Learn how to use bash! Learn how to setup secrets properly! These are things which quantify how the system performs and how to make it even better, eg. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" command was a life saver for me in one of my projects.\"), mdx(\"p\", null, \"Webservers, Certificate Authorities, Load Balancers, Reverse Proxies, Databases, Caches, Message Brokers, Queues, etc. are all things which are pretty common in a system. It is important to know how they work and how to use them.\"), mdx(\"p\", null, \"GitHub Actions are pretty cool. They can be used to automate a lot of things. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"A lot\"), \". Combined with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Make\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Docker\"), \" they can be used as a small self contained CI/CD pipeline. Plus the community is pretty active and there are a lot of actions available for free.\"), mdx(\"p\", null, \"Finally the talk of the town, Orchestration. Putting all images to work at once. There are a lot of ways to orchestrate the backend services. The most common ones are \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://kubernetes.io/\"\n  }, \"Kubernetes\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.docker.com/engine/swarm/\"\n  }, \"Docker Swarm\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nomadproject.io/\"\n  }, \"Nomad\")), mdx(\"p\", null, \"Using Kubernetes was pretty tempting for me initially for RAS. 6 months down the line, it turns out that all we needed to get going was 4 docker images in total with ability to restart on failing. We went with Docker Swarm and it worked out pretty well and easy. Learning about how to use Docker and Kubernetes to their full potential is something I definitely look forward to. \"), mdx(\"p\", null, \"P.s. Fun \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://engineering.grab.com/dns-resolution-in-go-and-cgo\"\n  }, \"networking\"), \" read.\"), mdx(\"h3\", {\n    \"id\": \"monitoring\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#monitoring\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Monitoring\"), mdx(\"p\", null, \"What to monitor? How to monitor? There are a lot of really useful metrics generated at the time when the system is live. That's something worth looking into. For example,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How many requests are being made to the backend?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data in and data out\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Average response time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Peak response time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hardware usage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thread count (specifically a pain with JVM based languages)\")), mdx(\"p\", null, \"These are number which won't be present just on their own but quantifying them is important. There are a lot of tools which can be used to monitor the system for such metrics. A really popular tool for the same is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://prometheus.io/\"\n  }, \"Prometheus\"), \". It is a time series database which can be used to store and query metrics. It has SQL like querying capabilities and a lot of exporters for different services.\\nA lot of other tools can be used to monitor the system. For example, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://grafana.com/\"\n  }, \"Grafana\"), \" can be used to visualize the metrics. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.jaegertracing.io/\"\n  }, \"Jaeger\"), \" can be used to trace the requests. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.elastic.co/kibana\"\n  }, \"Kibana\"), \" can be used to visualize logs.\"), mdx(\"p\", null, \"On a sidenote it is always better to have a lot of \\\"unused\\\" metrics than worrying about the quality of the metrics. \"), mdx(\"h3\", {\n    \"id\": \"cloud-providers\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cloud-providers\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Cloud Providers\"), mdx(\"p\", null, \"Cloud is mostly the place where the whole system would be running. One should totally understand \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://aws.amazon.com/\"\n  }, \"AWS\"), \" and work with it to get a better picture of what happens in the real software world. (It is mostly a discussion of the company being ready to bear the cost of the cloud provider or not, with every new tool you start to build around the system.)\"), mdx(\"p\", null, \"A lot of IaC (Infrastructure as Code) tools are available for the same. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.terraform.io/\"\n  }, \"Terraform\"), \" is one of the most popular ones. It is a tool which can be used to automate the provisioning of the cloud resources. Pretty cool stuff.\"), mdx(\"h3\", {\n    \"id\": \"database\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#database\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Database\"), mdx(\"p\", null, \"There are a lot of a fancy databases apart from the usual SQL and NoSQL choices, highly specific to a smaller set of tasks. So before deciding to use MongoDB for everything, it is a nice idea to look into the problem at hand and see if there is a better fit. Just to state some examples,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cassandra.apache.org/\"\n  }, \"Cassandra\"), \", has a lot of horizontal scaling capabilities and is a distributed database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://redis.io/\"\n  }, \"Redis\"), \" for caching and pub-sub as it works in memory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.elastic.co/elasticsearch/\"\n  }, \"Elasticsearch\"), \" for search and analytics as it is a distributed search engine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://neo4j.com/\"\n  }, \"Neo4j\"), \" for graph databases such as social networks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.cockroachlabs.com/\"\n  }, \"CockroachDB\"), \" for distributed SQL databases with ACID guarantees\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://min.io/\"\n  }, \"Minio\"), \" for object storage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://clickhouse.tech/\"\n  }, \"ClickHouse\"), \" for analytics and big data processing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.timescale.com/\"\n  }, \"TimescaleDB\"), \" for time series data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://aws.amazon.com/s3/\"\n  }, \"S3\"), \" a lot of easy to use key-value storage\")), mdx(\"p\", null, \"The list is not exhasutive and I find it fascinating to what extent the niche has been developed.\"), mdx(\"hr\", null), mdx(\"p\", null, \"There are a shit ton of tools getting built everday. As a crux of the whole technical chat, one can take away a key advice to not reinvet the wheel as much as possible.\"), mdx(\"p\", null, \"Coming to RAS, things are pretty good as of now, but, following my own advice (narcissistic AF) I'd try to bring about the following changes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add more abstraction to the backend services\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add an alert system for network failure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cleaning up old CDN data (I'm not sure if it is possible)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add a better logging system, more consise\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"gRPC for internal communication with a GraphQL API layer on top\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A better filestorage system, with a better(read that functional) database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Secret management from outside the cluster\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Removing redundant business specific logic from backend (GraphQL would help with this)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[Addition]\", \" A real caching system for large queries (not talking Redis here)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TESTS (I'm not sure if it is possible to add tests to the current system, but it would be nice to have)\")), mdx(\"p\", null, \"This blog and the list would probably be updated as I learn more. I'd love to hear your thoughts on the same. Thanks for reading!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Tl;dr: This post is going to be based on my experience with building and monitoring the Recruitment Automation System on which I worked the past summer. I will also summarize some decisions made during the development process and discuss some of the challenges we faced.</p><hr/><h2 id=\"primer\"><a href=\"#primer\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Primer</h2><p>Anyone who has wanted to build something which others can use has probably thought about the following questions:</p><ol><li>How do I make sure people can use my product?</li><li>How many people can use my product?</li><li>What harm can exposing my product to the world do? (yeah I mean you don&#x27;t want to make something which can be compromised and has 1000s of users)</li></ol><p>Most of what people see lies on the Frontend or the more visual component of the solution. But a lot of heavy lifting happens on the backend hidden from the rest of the users. A lot of answers to the above questions lie in the choices made while thinking about the backend of the system.</p><p>Anyway I am not here to narrate a story, I would assume the reader to know something about building elementary frontend and backend. </p><p>Also consider reading: </p><ul><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.joelonsoftware.com/2006/08/01/can-your-programming-language-do-this/\">About which language to use</a></li><li>Being a <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.joelonsoftware.com/2009/09/23/the-duct-tape-programmer/\">duct tape programmer</a></li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://engineering.grab.com/zero-downtime-migration\">Inspiring work</a></li></ul><hr/><h2 id=\"more-technical-stuff\"><a href=\"#more-technical-stuff\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>More Technical Stuff</h2><h3 id=\"writing-neat-code\"><a href=\"#writing-neat-code\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Writing neat code</h3><p>Structuring how the backend services look (in an abstract way) contribute to a lot in terms of maintainability and scalability. Yeah one can write all of the logic in one huge file with all primitive types and no abstractions but that is not the way to go. There is a reason why <code>struct</code> exists in most languages, use it to your advantage. Folders are free of cost and the visibility they provide at a glance is priceless (for real).</p><h3 id=\"abstraction\"><a href=\"#abstraction\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Abstraction</h3><p>Abstraction always helps. However difficult it might seem to be, it kind of simplifies the whole process in the long run. There are a lot of high-level frameworks which currently enable to abstract out a lot of the low-level details from the developer and still be pretty powerful. For example, I came across a framework in Scala after the <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.bloomberg.com/news/articles/2022-11-16/twitter-layoffs-are-bad-example-of-how-to-fire-people\">Twitter Layoff News</a> called <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://twitter.github.io/finagle/\">Finagle</a>. It is a RPC framework which is used by Twitter to build their backend services. The most amazing part about Finagle is in how simplistic it is to write services and client code too, meanwhile the services can be as complex as nodes on a distributed system communicating with each other (in form of <code>Future[Unit]</code>, for the enthusiasts).</p><p>This <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://twitter.github.io/scala_school/searchbird.html\">example</a> over here is just beautiful. Scala is a pretty amazing language with all the good parts of Java, ngl.</p><p>Moreover, another abstraction over <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://twitter.github.io/finagle/\">Finagle</a> and <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://twitter.github.io/twitter-server/\">TwitterServer</a> is <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://twitter.github.io/finatra/\">Finatra</a>. It is a web framework built on top of Finagle. It is pretty amazing to see how much of the boilerplate code can be abstracted away.</p><p>More on <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://blog.rockthejvm.com/finagle/\">Finagle</a> for the curious. Just check out the Load Balancer part over there. Fascinating!</p><h3 id=\"architecture\"><a href=\"#architecture\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Architecture</h3><p>How a system is designed, the choices made at one particular point in time, with one particular tool/protocol/middleware, might sound to have a lot of value. But it does not kill in most of the cases. It is important to keep in mind that the system is not going to be static. It is going to evolve and change. So it is important to keep the architecture as decoupled as possible and not over-engineering it needs real skills.</p><p>Prime examples of over-engineering:</p><ul><li>Thinking of <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://martinfowler.com/articles/microservices.html\">microservices</a> in the beginning.</li><li>Using <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://grpc.io/\">gRPC</a> for everything. It is fast but for a very different use case. It is not a replacement for REST APIs.</li><li>Using <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://kafka.apache.org/\">Kafka</a> for simple pub-sub use cases. It is a distributed streaming platform and not a message broker.</li><li>Fancy &quot;Design Patterns&quot;, yeah I would totally not write anything v1 with CQRS in mind.</li></ul><p>Anyway, the above mentioned tools are pretty awesome, but they&#x27;re just too good for some 1000s of users in my opinion.</p><h3 id=\"devops\"><a href=\"#devops\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>DevOps</h3><p>Learn about Docker containers today! Learn some network basics! Learn how to use bash! Learn how to setup secrets properly! These are things which quantify how the system performs and how to make it even better, eg. The <code>top</code> command was a life saver for me in one of my projects.</p><p>Webservers, Certificate Authorities, Load Balancers, Reverse Proxies, Databases, Caches, Message Brokers, Queues, etc. are all things which are pretty common in a system. It is important to know how they work and how to use them.</p><p>GitHub Actions are pretty cool. They can be used to automate a lot of things. <em>A lot</em>. Combined with <code>Make</code> and <code>Docker</code> they can be used as a small self contained CI/CD pipeline. Plus the community is pretty active and there are a lot of actions available for free.</p><p>Finally the talk of the town, Orchestration. Putting all images to work at once. There are a lot of ways to orchestrate the backend services. The most common ones are <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://kubernetes.io/\">Kubernetes</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://docs.docker.com/engine/swarm/\">Docker Swarm</a> and <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.nomadproject.io/\">Nomad</a></p><p>Using Kubernetes was pretty tempting for me initially for RAS. 6 months down the line, it turns out that all we needed to get going was 4 docker images in total with ability to restart on failing. We went with Docker Swarm and it worked out pretty well and easy. Learning about how to use Docker and Kubernetes to their full potential is something I definitely look forward to. </p><p>P.s. Fun <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://engineering.grab.com/dns-resolution-in-go-and-cgo\">networking</a> read.</p><h3 id=\"monitoring\"><a href=\"#monitoring\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Monitoring</h3><p>What to monitor? How to monitor? There are a lot of really useful metrics generated at the time when the system is live. That&#x27;s something worth looking into. For example,</p><ul><li>How many requests are being made to the backend?</li><li>Data in and data out</li><li>Average response time</li><li>Peak response time</li><li>Hardware usage</li><li>Thread count (specifically a pain with JVM based languages)</li></ul><p>These are number which won&#x27;t be present just on their own but quantifying them is important. There are a lot of tools which can be used to monitor the system for such metrics. A really popular tool for the same is <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://prometheus.io/\">Prometheus</a>. It is a time series database which can be used to store and query metrics. It has SQL like querying capabilities and a lot of exporters for different services.\nA lot of other tools can be used to monitor the system. For example, <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://grafana.com/\">Grafana</a> can be used to visualize the metrics. <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.jaegertracing.io/\">Jaeger</a> can be used to trace the requests. <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.elastic.co/kibana\">Kibana</a> can be used to visualize logs.</p><p>On a sidenote it is always better to have a lot of &quot;unused&quot; metrics than worrying about the quality of the metrics. </p><h3 id=\"cloud-providers\"><a href=\"#cloud-providers\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Cloud Providers</h3><p>Cloud is mostly the place where the whole system would be running. One should totally understand <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://aws.amazon.com/\">AWS</a> and work with it to get a better picture of what happens in the real software world. (It is mostly a discussion of the company being ready to bear the cost of the cloud provider or not, with every new tool you start to build around the system.)</p><p>A lot of IaC (Infrastructure as Code) tools are available for the same. <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.terraform.io/\">Terraform</a> is one of the most popular ones. It is a tool which can be used to automate the provisioning of the cloud resources. Pretty cool stuff.</p><h3 id=\"database\"><a href=\"#database\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Database</h3><p>There are a lot of a fancy databases apart from the usual SQL and NoSQL choices, highly specific to a smaller set of tasks. So before deciding to use MongoDB for everything, it is a nice idea to look into the problem at hand and see if there is a better fit. Just to state some examples,</p><ul><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://cassandra.apache.org/\">Cassandra</a>, has a lot of horizontal scaling capabilities and is a distributed database</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://redis.io/\">Redis</a> for caching and pub-sub as it works in memory</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.elastic.co/elasticsearch/\">Elasticsearch</a> for search and analytics as it is a distributed search engine</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://neo4j.com/\">Neo4j</a> for graph databases such as social networks</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.cockroachlabs.com/\">CockroachDB</a> for distributed SQL databases with ACID guarantees</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://min.io/\">Minio</a> for object storage</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://clickhouse.tech/\">ClickHouse</a> for analytics and big data processing</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.timescale.com/\">TimescaleDB</a> for time series data</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://aws.amazon.com/s3/\">S3</a> a lot of easy to use key-value storage</li></ul><p>The list is not exhasutive and I find it fascinating to what extent the niche has been developed.</p><hr/><p>There are a shit ton of tools getting built everday. As a crux of the whole technical chat, one can take away a key advice to not reinvet the wheel as much as possible.</p><p>Coming to RAS, things are pretty good as of now, but, following my own advice (narcissistic AF) I&#x27;d try to bring about the following changes:</p><ul><li>Add more abstraction to the backend services</li><li>Add an alert system for network failure</li><li>Cleaning up old CDN data (I&#x27;m not sure if it is possible)</li><li>Add a better logging system, more consise</li><li>gRPC for internal communication with a GraphQL API layer on top</li><li>A better filestorage system, with a better(read that functional) database</li><li>Secret management from outside the cluster</li><li>Removing redundant business specific logic from backend (GraphQL would help with this)</li><li>[Addition]<!-- --> A real caching system for large queries (not talking Redis here)</li><li>TESTS (I&#x27;m not sure if it is possible to add tests to the current system, but it would be nice to have)</li></ul><p>This blog and the list would probably be updated as I learn more. I&#x27;d love to hear your thoughts on the same. Thanks for reading!</p>","scope":{}},"frontMatter":{"wordCount":1582,"readingTime":{"text":"8 min read","minutes":7.9,"time":474000,"words":1580},"slug":"backend101","fileName":"backend101.mdx","title":"How can my app actually work?","date":"2023-01-02","tags":["system design","go","RAS","guide"],"draft":false,"summary":"A summary of learnings and failings and the loop.","images":[]}},"prev":{"title":"Don't like Rust? Use some CLI tools written in it once","date":"2022-10-14","tags":["rust","linux","cli"],"draft":false,"summary":"🦀 appreciation era","images":[],"slug":"dont-like-rust-use-some-cli-tools-written-in-it-once"},"next":{"title":"TIL - Binaries are weird","date":"2023-07-04","tags":["linux","binaries","til"],"draft":false,"summary":"Wanted to know why are binaries for the same program of variable size and what optimizations follow.","images":[],"slug":"tilbinaries"}},"__N_SSG":true}