{"pageProps":{"post":{"mdxSource":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Starting to learn ROS can be a bit of a challenge. There are tons of new terminology and concepts to learn and this blog is designed to help you get started.\"), mdx(\"h1\", {\n    \"id\": \"why-ros\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#why-ros\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Why ROS?\"), mdx(\"p\", null, \"ROS is used as a framework for robot software development, by that I mean it is used for abstraction of hardware, low-level device control, passing information between processes, and several other niche areas. While all of it can possibly be implemented using bare metal C++ (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/cuauv/software\"\n  }, \"Cornell\"), \" does it pretty well), it is a lot easier to use when you are using a toolchain which is pretty much industry standard.\"), mdx(\"h1\", {\n    \"id\": \"structure\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#structure\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Structure\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Nodes\"), \": Base unit in ROS, a node is a process that runs on a computer. It uses a ROS client library (rospy, roscpp) to communicate with other nodes. Commands \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rosnode\"), \" helps you manage nodes, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rosrun\"), \" helps you run nodes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Packages\"), \": A package is a low level, \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"independent\"), \", shareable directory that contains files such as source code, configuration files, message descriptions, service descriptions, libraries, data, and build files. Anologous to a package in NodeJS (not precisely tho). A package can contain \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"multiple nodes\"), \". A \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://answers.ros.org/question/9133/packages-vs-nodes/\"\n  }, \"good read\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Workspace\"), \": A workspace is a directory that contains multiple packages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Topics\"), \": A topic is a communication channel between nodes. It is a way to pass information between nodes. Could be some sort of sensor data, or a command to move a robot. Command \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rostopic\"), \" helps you manage topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Messages\"), \": Topics are categorised by the information they contain. This information is called a message. For example, a topic publishing camera data and another publishing velocity would have different messages (kindof obvious right?).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Publisher and Subscriber\"), \": A publisher publishes messages, a subscriber subscribes to messages, through topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Services\"), \": A service is a way to communicate with other nodes. It is a way to request information from other nodes. Could be a way to request a robot to move, or a way to request a robot to stop. Resemble the standard \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Client%E2%80%93server_model\"\n  }, \"client-server model\"), \". Here, one node registers a service, and another node can request the service and get a response, two-way communication.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Client and Server\"), \": A client is a node that requests a service, and a server is a node that provides the service.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Parameter Server\"), \": A parameter server is a node that stores parameters. Parameters are variables that can be set by a node, and read by other nodes, like a shared dictionary. Must read: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://wiki.ros.org/Parameter%20Server\"\n  }, \"this\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Master\"), \": It kind of acts as a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.cloudflare.com/en-in/learning/dns/what-is-a-dns-server/\"\n  }, \"DNS server\"), \" for your nodes, so they can retrieve each other. Keeps a record of all the nodes that are running (can be from different packages). It tracks publishers and subscribers to topics as well as services. The command \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"roscore\"), \" starts the master, along with the logging and parameter server. Cannot use ROS without the master running.\")), mdx(\"p\", null, \"NOTE: The publish/subscribe framework is a many-to-many system where multiple nodes can publish to and subscribe from a topic. It is also a one-way transport of information. To alleviate these problems and to facilitate one-to-one, two-way transport of short-lived information, the service framework is used.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/images/ros.gif\",\n    \"alt\": \"ros\"\n  })), mdx(\"center\", null, \"A neat illustration, pretty close to how ROS actually works. \"), mdx(\"hr\", null), mdx(\"h1\", {\n    \"id\": \"utilities\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#utilities\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Utilities\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rqt\"), \": rqt is a package that lets you visualise the current network of nodes and topics in ROS.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"roslaunch\"), \": Lets you run launch files, which contain a list of nodes and topics to be run (very convenient for running multiple nodes).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rosbag\"), \": Lets you create and manage bags of data, consisting of messages from topics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"urdf\"), \": Lets you create and manage URDF files, which are used to describe the robot's kinematics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gazebo\"), \": A simulation tool to work with the bots in an artificial environment with physics similar to the use-case and customisable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"catkin\"), \": A build system (if you feel like criticizing ROS, \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://wiki.ros.org/catkin/conceptual_overview\"\n  }, \"start here\"), \") for ROS, which is a lot more convenient than the standard CMake.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tf\"), \": A library for transforming between coordinate frames.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rviz\"), \": A visualization tool for ROS. Displays a lot of information about the system i.e. nodes, topics, messages, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dynamic_reconfigure\"), \": A library for configuring parameters of ROS nodes. It can help you to change the parameters of a node without restarting the node, i.e. at runtime. To understand how to use it, read \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://wiki.ros.org/dynamic_reconfigure/Tutorials\"\n  }, \"this\"), \".\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Found this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nu-msr.github.io/me495_site/glossary.html\"\n  }, \"glossary\"), \" to be helpful occasionally.\")), mdx(\"hr\", null), mdx(\"h1\", {\n    \"id\": \"resources\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#resources\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://wiki.ros.org/ROS/\"\n  }, \"ROS Wiki\"), \": The official ROS wiki.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://sir.upc.edu/projects/rostutorials/\"\n  }, \"Maybe\"), \": A course, but prefer the wiki.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://nu-msr.github.io/me495_site/\"\n  }, \"Another course with better examples\"), \": Still prefer the wiki first.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.clearpathrobotics.com/assets/guides/kinetic/ros/Intro%20to%20the%20Robot%20Operating%20System.html\"\n  }, \"To have a look on how things work\"))), mdx(\"p\", null, \"It is pretty important to go through the ROS wiki thouroughly.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/static/images/filesystem.png\",\n    \"alt\": \"ros-filesystem\"\n  })), mdx(\"center\", null, \"How the working directory usually looks like.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Starting to learn ROS can be a bit of a challenge. There are tons of new terminology and concepts to learn and this blog is designed to help you get started.</p><h1 id=\"why-ros\"><a href=\"#why-ros\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Why ROS?</h1><p>ROS is used as a framework for robot software development, by that I mean it is used for abstraction of hardware, low-level device control, passing information between processes, and several other niche areas. While all of it can possibly be implemented using bare metal C++ (<a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://github.com/cuauv/software\">Cornell</a> does it pretty well), it is a lot easier to use when you are using a toolchain which is pretty much industry standard.</p><h1 id=\"structure\"><a href=\"#structure\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Structure</h1><ul><li><strong>Nodes</strong>: Base unit in ROS, a node is a process that runs on a computer. It uses a ROS client library (rospy, roscpp) to communicate with other nodes. Commands <code>rosnode</code> helps you manage nodes, <code>rosrun</code> helps you run nodes.</li><li><strong>Packages</strong>: A package is a low level, <strong>independent</strong>, shareable directory that contains files such as source code, configuration files, message descriptions, service descriptions, libraries, data, and build files. Anologous to a package in NodeJS (not precisely tho). A package can contain <strong>multiple nodes</strong>. A <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://answers.ros.org/question/9133/packages-vs-nodes/\">good read</a>.</li><li><strong>Workspace</strong>: A workspace is a directory that contains multiple packages.</li><li><strong>Topics</strong>: A topic is a communication channel between nodes. It is a way to pass information between nodes. Could be some sort of sensor data, or a command to move a robot. Command <code>rostopic</code> helps you manage topics.</li><li><strong>Messages</strong>: Topics are categorised by the information they contain. This information is called a message. For example, a topic publishing camera data and another publishing velocity would have different messages (kindof obvious right?).</li><li><strong>Publisher and Subscriber</strong>: A publisher publishes messages, a subscriber subscribes to messages, through topics.</li><li><strong>Services</strong>: A service is a way to communicate with other nodes. It is a way to request information from other nodes. Could be a way to request a robot to move, or a way to request a robot to stop. Resemble the standard <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://en.wikipedia.org/wiki/Client%E2%80%93server_model\">client-server model</a>. Here, one node registers a service, and another node can request the service and get a response, two-way communication.</li><li><strong>Client and Server</strong>: A client is a node that requests a service, and a server is a node that provides the service.</li><li><strong>Parameter Server</strong>: A parameter server is a node that stores parameters. Parameters are variables that can be set by a node, and read by other nodes, like a shared dictionary. Must read: <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"http://wiki.ros.org/Parameter%20Server\">this</a>.</li><li><strong>Master</strong>: It kind of acts as a <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://www.cloudflare.com/en-in/learning/dns/what-is-a-dns-server/\">DNS server</a> for your nodes, so they can retrieve each other. Keeps a record of all the nodes that are running (can be from different packages). It tracks publishers and subscribers to topics as well as services. The command <code>roscore</code> starts the master, along with the logging and parameter server. Cannot use ROS without the master running.</li></ul><p>NOTE: The publish/subscribe framework is a many-to-many system where multiple nodes can publish to and subscribe from a topic. It is also a one-way transport of information. To alleviate these problems and to facilitate one-to-one, two-way transport of short-lived information, the service framework is used.</p><p><img src=\"/static/images/ros.gif\" alt=\"ros\"/></p><center>A neat illustration, pretty close to how ROS actually works. </center><hr/><h1 id=\"utilities\"><a href=\"#utilities\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Utilities</h1><ul><li><code>rqt</code>: rqt is a package that lets you visualise the current network of nodes and topics in ROS.</li><li><code>roslaunch</code>: Lets you run launch files, which contain a list of nodes and topics to be run (very convenient for running multiple nodes).</li><li><code>rosbag</code>: Lets you create and manage bags of data, consisting of messages from topics.</li><li><code>urdf</code>: Lets you create and manage URDF files, which are used to describe the robot&#x27;s kinematics.</li><li><code>gazebo</code>: A simulation tool to work with the bots in an artificial environment with physics similar to the use-case and customisable.</li><li><code>catkin</code>: A build system (if you feel like criticizing ROS, <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"http://wiki.ros.org/catkin/conceptual_overview\">start here</a>) for ROS, which is a lot more convenient than the standard CMake.</li><li><code>tf</code>: A library for transforming between coordinate frames.</li><li><code>rviz</code>: A visualization tool for ROS. Displays a lot of information about the system i.e. nodes, topics, messages, etc.</li><li><code>dynamic_reconfigure</code>: A library for configuring parameters of ROS nodes. It can help you to change the parameters of a node without restarting the node, i.e. at runtime. To understand how to use it, read <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"http://wiki.ros.org/dynamic_reconfigure/Tutorials\">this</a>.</li></ul><blockquote><p>Found this <a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://nu-msr.github.io/me495_site/glossary.html\">glossary</a> to be helpful occasionally.</p></blockquote><hr/><h1 id=\"resources\"><a href=\"#resources\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Resources</h1><ul><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://wiki.ros.org/ROS/\">ROS Wiki</a>: The official ROS wiki.</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://sir.upc.edu/projects/rostutorials/\">Maybe</a>: A course, but prefer the wiki.</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"https://nu-msr.github.io/me495_site/\">Another course with better examples</a>: Still prefer the wiki first.</li><li><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration:none\" href=\"http://www.clearpathrobotics.com/assets/guides/kinetic/ros/Intro%20to%20the%20Robot%20Operating%20System.html\">To have a look on how things work</a></li></ul><p>It is pretty important to go through the ROS wiki thouroughly.</p><p><img src=\"/static/images/filesystem.png\" alt=\"ros-filesystem\"/></p><center>How the working directory usually looks like.</center>","scope":{}},"frontMatter":{"wordCount":792,"readingTime":{"text":"4 min read","minutes":3.95,"time":237000,"words":790},"slug":"ros-a-primer","fileName":"ros-a-primer.mdx","title":"ROS - A Primer","date":"2022-06-28","tags":["ROS","Linux"],"draft":false,"summary":"Discussed the essentials of ROS for a smoother learning curve.","images":[]}},"prev":{"title":"TIL - The case with Uber Eats","date":"2022-04-29","tags":["fp","idempotency","backend"],"draft":false,"summary":null,"images":[],"slug":"tiluber-eats"},"next":null},"__N_SSG":true}